"""
This code is generated by Ridvan Salih KUZU @DLR
LAST EDITED:  14.09.2021
ABOUT SCRIPT:
It defines some utility functions required in training and evaluation of model
"""

import copy
import torch 
from torch import nn
import torch.nn.functional as F
from sklearn.metrics import log_loss
import numpy as np 
from torch.autograd import Variable


# Define the train_val helper function:
def train_val(model, params):
    num_epochs=params["num_epochs"]
    loss_func=params["loss_func"]
    opt=params["optimizer"]
    train_dl=params["train_dl"]
    val_dl=params["val_dl"]
    sanity_check=params["sanity_check"]
    lr_scheduler=params["lr_scheduler"]
    path2weights=params["path2weights"]
    fold=params["fold"]
    device=params["device"]


    best_model_wts = copy.deepcopy(model.state_dict())
    best_loss=float('inf')

    for epoch in range(num_epochs):
        current_lr=get_lr(opt)
        print('Epoch {}/{}, current lr={}'.format(epoch, num_epochs - 1, current_lr))   

        model.train()
        train_loss = loss_epoch(model,loss_func,train_dl, epoch, num_epochs, device, sanity_check,opt)
        
        model.eval()
        with torch.no_grad():
            val_loss = loss_epoch(model,loss_func,val_dl, epoch, num_epochs, device, sanity_check)

        if val_loss < best_loss:
            best_loss = val_loss
            best_model_wts = copy.deepcopy(model.state_dict())
            modelname = model.modelname.split('_')[0]
            #torch.save(model.state_dict(), f'{path2weights}/{model.modelname}.pt')
            torch.save(model.state_dict(), f'{path2weights}/{modelname}_{fold}.pt')
            #print("Copied best model weights!")
            
        lr_scheduler.step(val_loss)
        if current_lr != get_lr(opt):
            print("Loading best model weights!")
            model.load_state_dict(best_model_wts)            

        print("train loss: %.6f" %(train_loss))
        print("val loss: %.6f" %(val_loss))
        print("-"*10) 
    model.load_state_dict(best_model_wts)
   
    return model, best_loss


# Define the loss_epoch helper function:
def loss_epoch(model,loss_func,dataset_dl,epoch, num_epochs, device, sanity_check=False,opt=None):
    running_loss=0.0
    len_data=len(dataset_dl.dataset)
    
    for xb, yb in dataset_dl:

        xb = xb.to(device)
        yb = yb.to(device)
        yb = yb.squeeze()
        yb = yb.to(torch.int64)

        output=model(xb.float())
        loss_b = loss_batch(loss_func, output, yb, opt)
        running_loss += loss_b # * xb.size(0)

        if sanity_check is True:
            break
    loss=running_loss/float(len_data)
    return loss


# Define a helper function to calculate the loss per data batch:
def loss_batch(loss_func, output, target, opt=None):
    loss = loss_func(output, target)
    if opt is not None:
        opt.zero_grad()
        loss.backward()
        opt.step()
      
    return loss.item()


# Define a helper function to get the learning rate:
def get_lr(opt):
    for param_group in opt.param_groups:
        return param_group['lr']

    return loss.item()
